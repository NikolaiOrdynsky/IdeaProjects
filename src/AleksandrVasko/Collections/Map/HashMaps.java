package AleksandrVasko.Collections.Map;

import java.util.*;

/*Интерфейс Map<K, V> представляет отображение или иначе говоря словарь, где каждый элемент представляет пару "ключ-значение".
При этом все ключи уникальные в рамках объекта Map. Такие коллекции облегчают поиск элемента,
если нам известен ключ - уникальный идентификатор объекта.
Следует отметить, что в отличие от других интерфейсов, которые представляют коллекции,
интерфейс Map НЕ расширяет интерфейс Collection.
Среди методов интерфейса Map можно выделить следующие:
-void clear(): очищает коллекцию
-boolean containsKey(Object k): возвращает true, если коллекция содержит ключ k
-boolean containsValue(Object v): возвращает true, если коллекция содержит значение v
-Set<Map.Entry<K, V>> entrySet(): возвращает набор элементов коллекции. Все элементы представляют объект Map.Entry
-boolean equals(Object obj): возвращает true, если коллекция идентична коллекции, передаваемой через параметр obj
-boolean isEmpty: возвращает true, если коллекция пуста
-V get(Object k): возвращает значение объекта, ключ которого равен k. Если такого элемента не окажется, то возвращается значение null
-V getOrDefault(Object k, V defaultValue): возвращает значение объекта, ключ которого равен k.
Если такого элемента не окажется, то возвращается значение defaultVlue
-V put(K k, V v): помещает в коллекцию новый объект с ключом k и значением v. Если в коллекции уже есть объект с подобным ключом, то он перезаписывается.
После добавления возвращает предыдущее значение для ключа k, если он уже был в коллекции.
Если же ключа еще не было в коллекции, то возвращается значение null
-V putIfAbsent(K k, V v): помещает в коллекцию новый объект с ключом k и значением v, если в коллекции еще нет элемента с подобным ключом.
-Set<K> keySet(): возвращает набор всех ключей отображения
-Collection<V> values(): возвращает набор всех значений отображения
-void putAll(Map<? extends K, ? extends V> map): добавляет в коллекцию все объекты из отображения map
-V remove(Object k): удаляет объект с ключом k
-int size(): возвращает количество элементов коллекции
Чтобы положить объект в коллекцию, используется метод put, а чтобы получить по ключу - метод get.
Реализация интерфейса Map также позволяет получить наборы как ключей, так и значений.
А метод entrySet() возвращает набор всех элементов в виде объектов Map.Entry<K, V>.
Обобщенный интерфейс Map.Entry<K, V> представляет объект с ключом типа K и значением типа V и определяет следующие методы:
-boolean equals(Object obj): возвращает true, если объект obj, представляющий интерфейс Map.Entry, идентичен текущему
-K getKey(): возвращает ключ объекта отображения
-V getValue(): возвращает значение объекта отображения
-V setValue(V v): устанавливает для текущего объекта значение v
-int hashCode(): возвращает хеш-код данного объекта
При переборе объектов отображения мы будем оперировать этими методами для работы с ключами и значениями объектов.
Классы отображений. HashMap
Базовым классом для всех отображений является абстрактный класс AbstractMap, который реализует большую часть методов интерфейса Map.
Наиболее распространенным классом отображений является HashMap, который реализует интерфейс Map и наследуется от класса AbstractMap.*/
public class HashMaps {

    public static void main(String[] args) {
        // Map<Integer,String> map= new HashMap<>();
        // map.put(1,"Toyota");//Связывает указанное значение с указанным ключом в этой карте.Если карта ранее содержала сопоставление для ключа,
        // старое значение заменяется указанным значением.
        // map.put(2,"Audi");
        // map.put(3,"VW");
        // System.out.println(map.get(1));
        Map<String, Integer> wordMap = new HashMap<>();
        //Scanner console = new Scanner(System.in);
        // String string = console.nextLine();
        String string = "Вызывающие абоненты не должны делать никаких предположений об идентичности возвращаемых экземпляров. об идентичности возвращаемых экземпляров об идентичности возвращаемых экземпляров";
        String lowerCaseString = string.toLowerCase();
        String[] word = lowerCaseString.split(" ");//Разбивает эту строку вокруг совпадений данного регулярного выражения.
        // Этот метод работает так, как если бы он вызывал метод разделения с двумя
        // аргументами с заданным выражением и предельным аргументом, равным нулю.
        // Поэтому конечные пустые строки не включаются в результирующий массив.

        for (String key : word) {
            Integer value = wordMap.get(key);
            if (value == null) {                 //Если у ключа key значение равно null, тоесть его нет в коллекции,
                wordMap.put(key, 1);             // тогда добавим этот ключ со значением 1
            } else {
                wordMap.put(key, value + 1);     // если ключ уже есть в коллекции то прибавим к значению 1.
            }
        }

        print(convertMapToSet(wordMap));
    }

private static NavigableSet<Word> convertMapToSet(Map<String, Integer> wordMap){
    NavigableSet<Word> wordSet = new TreeSet<>();
    for (Map.Entry<String, Integer> s : wordMap.entrySet()) {// Метод entrySet возвращает представление коллекции карты, элементы которой относятся к этому классу.
        wordSet.add(new Word(s.getKey(), s.getValue()));
    }
    return wordSet;
}

private static void print(NavigableSet<Word> wordMap) {
        for (Word s:wordMap) {
            System.out.println(s.toString());
        }
    }

}
