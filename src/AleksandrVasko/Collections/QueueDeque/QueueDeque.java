package AleksandrVasko.Collections.QueueDeque;

import java.util.ArrayDeque;
import java.util.Deque;
/*Линейная коллекция, поддерживающая вставку и удаление элементов с обоих концов.
Название deque является сокращением от "двусторонняя очередь" и обычно произносится как "колода".
Большинство реализаций Deque не устанавливают фиксированных ограничений на количество элементов,
которые они могут содержать, но этот интерфейс поддерживает deques с ограниченной емкостью,
а также те, размер которых не ограничен.
Этот интерфейс определяет методы доступа к элементам на обоих концах деки.
Предусмотрены методы для вставки, удаления и изучения элемента. Каждый из этих методов существует в двух формах:
один создает исключение в случае сбоя операции, другой возвращает специальное значение
(либо null, либо false, в зависимости от операции).
Последняя форма операции вставки разработана специально для использования с реализациями Deque с ограниченной емкостью;
в большинстве реализаций операции вставки не могут завершиться неудачно.*/

public class QueueDeque {
    public static void main(String[] args) {
        Deque<Integer> list = new ArrayDeque<>();

        list.offer(1);/*помещает указанный элемент в эту очередь, если это возможно сделать немедленно, не нарушая ограничений емкости.
                            При использовании очереди с ограниченной емкостью этот метод, как правило, предпочтительнее для добавления,
                            который может не вставить элемент, только вызвав исключение. */
        list.offer(2);
        list.offer(3);
        list.offer(4);
        System.out.println(list);
        list.add(5);
        System.out.println(list);
        System.out.println(list.offerLast(9));//Вставляет указанный элемент в конец этого списка, если только это не нарушает ограничения емкости.
                                                // При использовании дескриптора с ограниченной емкостью этот метод обычно предпочтительнее метода addLast,
                                                // который может не вставить элемент, только вызвав исключение.

        list.poll();//Извлекает и удаляет заголовок этой очереди или возвращает значение null, если эта очередь пуста.
        System.out.println(list);

        list.element();//Извлекает, но не удаляет главу этой очереди. Этот метод отличается от peek только тем, что он создает исключение, если эта очередь пуста.

        list.removeFirst();// Извлекает и удаляет первый элемент этого дека. Этот метод отличается от pollFirst только тем, что он создает исключение, если этот раздел пуст.

        System.out.println( list.peekLast());//Извлекает, но не удаляет последний элемент этого списка или возвращает значение null, если этот список пуст.

        list.removeFirstOccurrence(3);//Удаляет первое вхождение указанного элемента из этого списка.
                                         // Если дека не содержит элемента, он остается неизменным.
                                         // Более формально удаляет первый элемент e таким образом, что Objects.равно(o, e) (если такой элемент существует).
                                         // Возвращает значение true, если этот deque содержал указанный элемент (или, что эквивалентно, если этот deque изменился в результате вызова).
        System.out.println(list);
    }
}

