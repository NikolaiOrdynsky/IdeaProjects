package AleksandrVasko.Collections.SetCollection;

import java.util.Arrays;

import java.util.TreeSet;
/*Реализация навигационного набора, основанная на карте деревьев. Элементы упорядочиваются с использованием их естественного порядка или с помощью компаратора,
предоставляемого во время создания набора, в зависимости от используемого конструктора.
Эта реализация обеспечивает гарантированную стоимость времени регистрации(n) для основных операций (добавление, удаление и содержит).
Обратите внимание, что порядок, поддерживаемый набором (независимо от того, предусмотрен ли явный компаратор или нет),
должен соответствовать equals, чтобы правильно реализовать интерфейс набора. (См. Сопоставимый или Компаратор для точного определения соответствия равным.)
Это происходит потому, что интерфейс набора определен в терминах операции "равно",
но экземпляр набора деревьев выполняет все сравнения элементов с помощью метода compareTo (или сравнения),
поэтому два элемента, которые считаются равными с помощью этого метода, с точки зрения набора равны.
Поведение набора четко определено, даже если его порядок не соответствует равным; он просто не подчиняется общему контракту интерфейса набора.
Обратите внимание, что эта реализация не синхронизирована. Если несколько потоков одновременно обращаются к набору дерева и по крайней мере один из потоков изменяет набор,
он должен быть синхронизирован извне. Обычно это достигается путем синхронизации с каким-либо объектом, который естественным образом инкапсулирует набор.
Если такого объекта не существует, набор должен быть "завернут" с помощью коллекций.Метод synchronizedSortedSet.
Это лучше всего делать во время создания, чтобы предотвратить случайный несинхронизированный доступ к набору.
     */
public class SetTreeSet {
    public static void main(String[] args) {
        String[] array1 = {"vw","audi","skoda","lada"};
        String[] array2 = {"renault","mersedes","ferrari","lada"};
        java.util.Set<String > list = new TreeSet<>(Arrays.asList(array1));
        System.out.println(list);
        list.addAll(Arrays.asList(array2));
        System.out.println(list);
    }
}
