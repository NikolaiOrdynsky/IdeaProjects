package AleksandrVasko.Collections.ListLinkedList;

import java.util.LinkedList;
import java.util.List;
/*Реализация двусвязного списка интерфейсов List и Deque.У каждого элемента есть ссылка на предыдущий элемент и на следующий.
Реализует все необязательные операции со списком и разрешает
все элементы (включая null).Все операции выполняются так, как и следовало ожидать для двусвязного списка.
Операции, индексирующие список, будут проходить по списку от начала или до конца, в зависимости от того,
что ближе к указанному индексу.Обратите внимание, что эта реализация не синхронизирована. Если несколько потоков
одновременно обращаются к связанному списку и по крайней мере один из потоков изменяет структуру списка,
он должен быть синхронизирован извне. (Структурная модификация-это любая операция, которая добавляет или удаляет
один или несколько элементов; простая установка значения элемента не является структурной модификацией.)
Обычно это достигается путем синхронизации с каким-либо объектом, который естественным образом инкапсулирует список.
Если такого объекта не существует, список следует "обернуть" с помощью коллекций.Метод синхронизированного списка.
Это лучше всего делать во время создания, чтобы предотвратить случайный несинхронизированный доступ к списку:
*/
public class LinkedLists {
    public static void main(String[] args) {
        List<String> list = new LinkedList<>();
        list.add("milk");
        list.add("beard");
        list.add("coffe");
        list.add("chees");
        list.add("milk");
        System.out.println(list);
    }
}
