package AleksandrVasko.Collections.ListArrayList_Iterator;


/*Упорядоченная коллекция (также известная как последовательность). Пользователь этого интерфейса имеет точный контроль
над тем, куда в списке вставляется каждый элемент. Пользователь может получить доступ к элементам по их целочисленному
 индексу (позиции в списке) и выполнить поиск элементов в списке.
В отличие от наборов, списки обычно допускают дублирование элементов. Более формально, списки обычно допускают пары
элементов e1 и e2, такие что e1.равно(e2), и они обычно допускают несколько нулевых элементов, если они вообще допускают
 нулевые элементы. Не исключено, что кто-то может захотеть реализовать список, запрещающий дубликаты, путем создания
 исключений во время выполнения, когда пользователь пытается их вставить, но мы ожидаем, что такое использование будет редким.
Интерфейс списка устанавливает дополнительные условия, помимо тех, которые указаны в интерфейсе сбора, в контрактах методов
 итератора, добавления, удаления, равенства и хэш-кода. Объявления для других унаследованных методов также включены здесь
 для удобства.
Интерфейс списка предоставляет четыре метода позиционного (индексированного) доступа к элементам списка.
Списки (например, массивы Java) основаны на нуле. Обратите внимание, что эти операции могут выполняться во времени,
пропорциональном значению индекса для некоторых реализаций (например, класс LinkedList). Таким образом, повторение
элементов в списке обычно предпочтительнее, чем индексирование по нему, если вызывающий объект не знает реализацию.
Интерфейс списка предоставляет специальный итератор, называемый ListIterator, который позволяет вставлять и заменять
элементы, а также осуществлять двунаправленный доступ в дополнение к обычным операциям, которые предоставляет интерфейс
 итератора. Предоставляется метод для получения итератора списка, который начинается с указанной позиции в списке.
Интерфейс списка предоставляет два метода поиска указанного объекта. С точки зрения производительности эти методы следует
использовать с осторожностью. Во многих реализациях они будут выполнять дорогостоящий линейный поиск.
Интерфейс списка предоставляет два метода для эффективной вставки и удаления нескольких элементов в произвольной точке списка.
Примечание: Хотя для списков допустимо содержать себя в качестве элементов, рекомендуется соблюдать крайнюю осторожность:
 методы equals и хэш-кода больше не четко определены в таком списке.
Некоторые реализации списков имеют ограничения на элементы, которые они могут содержать. Например, некоторые реализации
запрещают нулевые элементы, а некоторые имеют ограничения на типы их элементов. Попытка добавить недопустимый элемент
вызывает непроверенное исключение, обычно исключение NullPointerException или исключение ClassCastException.
Попытка запросить наличие недопустимого элемента может вызвать исключение или просто вернуть значение false;
некоторые реализации будут демонстрировать первое поведение, а некоторые-второе. В более общем плане,
попытка выполнить операцию с недопустимым элементом, завершение которой не приведет к вставке недопустимого элемента в
список, может вызвать исключение или может быть выполнена успешно, по выбору реализации. Такие исключения помечены как
"необязательные" в спецификации для этого интерфейса.*/

import java.util.Scanner;

/**
 * The type Main.
 */
public class Main {
    private static void instruction() {
        System.out.println("""
                Нажмите :\s
                1.Добавить задачу в конец коллекции.\s
                2.Добавить задачу в определенную позицию коллекции.
                3.Получить индекс порядковой позиции задачи в коллекции.
                4.Изменить задачу  в коллекции, в указанной позиции.
                5.Удалить задачу из коллекции.
                6.Показать элементы коллекции.
                """
        );
    }

    /**
     * The entry point of application.
     *
     * @param args the input arguments
     */
    public static void main(String[] args) {
        ArrayLists list = new ArrayLists();
        Scanner console = new Scanner(System.in);
        instruction();
        int input = console.nextInt();

        while (!(input == 0)) {
            switch (input) {
                case 1 -> {
                    System.out.println("1.Добавить задачу в конец коллекции.");
                    System.out.println("Введите тело задачи.");
                    console.nextLine();
                    String task1 = console.nextLine();
                    // list.addInList(task1);
                    list.addSortAlfavit(task1);
                    System.out.println("Операция выполнена.");
                    System.out.println("Введите следущую команду :");
                    input = console.nextInt();
                }
                case 2 -> {
                    System.out.println("2.Добавить задачу в определенную позицию коллекции.");
                    System.out.println("Введите тело задачи.");
                    console.nextLine();
                    String task2 = console.nextLine();
                    System.out.println("Введите номер позиции задачи в коллекции. Длинна коллекции :" + list.sizeList());
                    int index = console.nextInt();
                    list.addInIndexList(index, task2);
                    System.out.println("Операция выполнена.");
                    System.out.println("Введите следущую команду :");
                    input = console.nextInt();
                }
                case 3 -> {
                    System.out.println("3.Получить индекс порядковой позиции задачи в коллекции.");
                    System.out.println("Введите тело задачи.");
                    console.nextLine();
                    String task3 = console.nextLine();
                    System.out.println(list.seurchIndexList(task3));
                    System.out.println("Операция выполнена.");
                    System.out.println("Введите следущую команду :");
                    input = console.nextInt();
                }
                case 4 -> {
                    System.out.println("4.Изменить задачу  в коллекции, в указанной позиции.");
                    System.out.println("Введите тело задачи.");
                    console.nextLine();
                    String task4 = console.nextLine();
                    System.out.println("Введите порядковый номер задачи которую нужно заменить :");
                    int index2 = console.nextInt();
                    list.setList(index2, task4);
                    System.out.println("Операция выполнена.");
                    System.out.println("Введите следущую команду :");
                    input = console.nextInt();
                }
                case 5 -> {
                    System.out.println("5.Удалить задачу из коллекции.");
                    System.out.println("Порядковый номер задачи которую нужно удалить :");
                    console.nextLine();
                    int index3 = console.nextInt();
                    list.removeList(index3);
                    System.out.println("Операция выполнена.");
                    System.out.println("Введите следущую команду :");
                    input = console.nextInt();
                }
                case 6 -> {
                    console.nextLine();
                    list.printList();
                    System.out.println("Операция выполнена.");
                    System.out.println("Введите следущую команду :");
                    input = console.nextInt();
                }
                default -> input = 0;
            }
        }
    }
}
